{"version":3,"sources":["Components/LoaderJson.js","App.js","serviceWorker.js","index.js"],"names":["styleBlue","color","DataGoThumb","props","react_default","a","createElement","className","to","title","style","dangerouslySetInnerHTML","__html","notes","modified","created","views_count","author","tags","LoaderJSon","state","dataGov","subDataGov","linksDataGov","_this2","this","axios","get","then","res","console","log","setState","data","meta","links","_this$state","dataList","length","map","listInfo","i","key","id","LoaderJson_DataGoThumb","attributes","replace","slice","relationships","datasets","related","href","count","path","React","Component","App","LoaderJson_LoaderJSon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5a72cb3.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n const styleBlue = {\r\n color: 'blue'\r\n }\r\nconst DataGoThumb = (props) => (\r\n    <div className=\"thumb\">\r\n        <div to={'/'}  className=\"grey-text text-darken-4 \">\r\n            <span className=\"card-title card-title-title center heading\">\r\n                <span className='headingText'>\r\n                    {props.title}\r\n                </span> \r\n            </span>\r\n        </div>\r\n        <div className=\"grey-text text-darken-3 strechLine\" style={styleBlue}>\r\n            <div dangerouslySetInnerHTML={ {__html: props.notes} } />\r\n        </div> \r\n        <div className=\"row center\">\r\n            <div className=\"col s12 m6\">\r\n                <span className=\"d-md-block1\"> Data modyfikacji: </span>\r\n                <span className=\"d-md-block\"> {props.modified} </span>\r\n            </div>\r\n            <div className=\"col s12 m5 offset-m1\">\r\n                <span className=\"d-md-block1\"> Data utworzenia: </span>\r\n                <span className=\"d-md-block\"> {props.created} </span>\r\n            </div>\r\n        </div>\r\n        <div className=\"center\" >\r\n            <span className=\"d-md-block1\">\r\n                Odwiedzających: \r\n            </span>\r\n            <span className=\"d-md-block\">\r\n                {props.views_count} \r\n            </span>\r\n        </div>\r\n        <div className=\"center\">\r\n            {props.author}\r\n        </div>\r\n        <div className=\"grey-text text-darken-3 strechLine\">\r\n            Słowa kluczowe: {' ' + props.tags}\r\n        </div>\r\n    </div>\r\n  );\r\n\r\nexport default class LoaderJSon extends React.Component {\r\n    state = {\r\n        dataGov: [],\r\n        subDataGov: [],\r\n        linksDataGov: [],\r\n    }\r\n    componentDidMount () {\r\n        axios.get('https://api.dane.gov.pl/articles?page=1&per_page=5&sort=-created')\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({\r\n                dataGov: res.data.data,\r\n                subDataGov: res.data.meta,\r\n                linksDataGov: res.data.links\r\n            })\r\n        })\r\n    }\r\n   render () {\r\n    const { dataGov } = this.state;\r\n    const { subDataGov, linksDataGov } = this.state;\r\n    const dataList = dataGov.length ? (\r\n        dataGov.map((listInfo, i) => {\r\n            return (\r\n                <div className=\"post card\" key={listInfo.id}> \r\n                    <div className=\"card-content\">\r\n                        <DataGoThumb \r\n                            tags={listInfo.attributes.tags} \r\n                            title={listInfo.attributes.title.replace(/( \\S) /g, \"$1\\xa0\")} \r\n                            notes={listInfo.attributes.notes.replace(/<\\/?[^>]+(>|$)/g, \"\").slice(0, 220).replace(/( \\S) /g, \"$1\\xa0\") + '...'}\r\n                            \r\n                            modified={\r\n                                listInfo.attributes.modified.slice(0,10).replace(/-/g, \".\") \r\n                                + ', '\r\n                                + listInfo.attributes.modified.slice(11,16)\r\n                            }\r\n                            created={\r\n                                listInfo.attributes.created.slice(0,10).replace(/-/g, \".\") \r\n                                + ', '\r\n                                + listInfo.attributes.created.slice(11,16)\r\n                            }\r\n                            views_count={listInfo.attributes.views_count}\r\n                            author={listInfo.attributes.author}\r\n                        />\r\n                        <div>\r\n                            {listInfo.relationships.datasets.links.related.href}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <div className=\"center\">No data yet! </div>\r\n    )\r\n    console.log(dataList);\r\n    console.log(subDataGov);\r\n    console.log(linksDataGov);\r\n        return (\r\n            <div className=\"card z-depth-0 project-summary\">\r\n                <div className=\"card-content grey-text text-darken-3\">\r\n                    {dataList}\r\n                </div>\r\n                <div>\r\n                    <strong>Elementy meta i links:</strong>\r\n                    <div>\r\n                        Count: {this.state.subDataGov.count}\r\n                    </div>\r\n                    <div>\r\n                        Path: {this.state.subDataGov.path}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport LoaderJSon from './Components/LoaderJson';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <LoaderJSon />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}